name: Required Reviewers

on:
  workflow_call:
    inputs:
      project-name:
        description: 'Project identifier for team mapping'
        required: true
        type: string
      reviewers-per-team:
        description: 'Number of reviewers to request from each team (default: 1)'
        required: false
        type: number
        default: 1
    secrets:
      TOKEN:
        description: 'GitHub token with read:org scope'
        required: true

jobs:
  check-required-reviews:
    name: Check required reviews for ${{ inputs.project-name }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      # 1. Checkout .github repo to get mapping
      - name: Checkout organization .github repo
        uses: actions/checkout@v4
        with:
          repository: MagellanTV/.github
          path: .github-org
          token: ${{ secrets.TOKEN }}
      
      # 2. Load and parse project-team mapping
      - name: Load project-team mapping
        id: load-mapping
        run: |
          PROJECT_NAME="${{ inputs.project-name }}"
          MAPPING_FILE=".github-org/org-team-mapping.yml"
          
          python3 << PYTHON_EOF
          import yaml
          import json
          import os
          
          with open('$MAPPING_FILE', 'r') as f:
              mapping = yaml.safe_load(f)
          
          # Get projects dict first
          projects = mapping.get('projects', {})
          project = projects.get('$PROJECT_NAME')
          
          if not project:
              print(f"No configuration found for: $PROJECT_NAME")
              exit(1)
          
          teams = project.get('teams', [])
          description = project.get('description', 'No description')
          
          print(f"Required teams: {', '.join(teams)}")
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"teams={json.dumps(teams)}\n")
              f.write(f"description={description}\n")
              f.write(f"teams_count={len(teams)}\n")
          
          PYTHON_EOF
      
      # 3. Create requirements file for action-required-review
      - name: Create requirements configuration
        env:
          TEAMS: ${{ steps.load-mapping.outputs.teams }}
        run: |
          cat > /tmp/required-reviews-temp.yml <<EOF
          - name: Required reviews for ${{ inputs.project-name }}
            paths: unmatched
            teams:
          EOF
          
          echo "$TEAMS" | jq -r '.[]' | while read team; do
            echo "      - $team" >> /tmp/required-reviews-temp.yml
          done
      
      # 4. Check requirements (but don't request reviews from teams)
      - name: Check review requirements
        uses: Automattic/action-required-review@v3
        with:
          token: ${{ secrets.TOKEN }}
          requirements-file: /tmp/required-reviews-temp.yml
          status: Required reviews
          fail: true
          request-reviews: false
      
      # 4.5. Auto-assign PR to creator
      - name: Auto-assign PR to creator
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const prAuthor = context.payload.pull_request.user.login;
            const prNumber = context.issue.number;
            
            try {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                assignees: [prAuthor]
              });
              console.log(`Assigned to: ${prAuthor}`);
            } catch (error) {
              console.log(`Could not assign: ${error.message}`);
            }
      
      # 5. NEW: Request reviews from individual team members
      - name: Request reviews from team members
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          TEAMS: ${{ steps.load-mapping.outputs.teams }}
          REVIEWERS_PER_TEAM: ${{ inputs.reviewers-per-team }}
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const teams = JSON.parse(process.env.TEAMS);
            const reviewersPerTeam = parseInt(process.env.REVIEWERS_PER_TEAM);
            const org = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = context.issue.number;
            
            const allReviewers = [];
            const prAuthor = context.payload.pull_request.user.login;
            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: org,
              repo: repo,
              pull_number: prNumber
            });
            
            const existingReviewers = new Set(reviews.map(r => r.user.login));
            
            for (const teamSlug of teams) {
              try {
                const { data: members } = await github.rest.teams.listMembersInOrg({
                  org: org,
                  team_slug: teamSlug
                });
                
                const availableMembers = members
                  .map(m => m.login)
                  .filter(login => login !== prAuthor && !existingReviewers.has(login));
                
                if (availableMembers.length === 0) {
                  console.log(`${teamSlug}: no available members`);
                  continue;
                }
                
                const selectedReviewers = availableMembers
                  .sort(() => Math.random() - 0.5)
                  .slice(0, Math.min(reviewersPerTeam, availableMembers.length));
                
                console.log(`${teamSlug}: ${selectedReviewers.join(', ')}`);
                allReviewers.push(...selectedReviewers);
                
              } catch (error) {
                console.error(`${teamSlug}: ${error.message}`);
              }
            }
            
            const uniqueReviewers = [...new Set(allReviewers)];
            
            if (uniqueReviewers.length === 0) {
              console.log('No reviewers to request');
              return;
            }
            
            try {
              await github.rest.pulls.requestReviewers({
                owner: org,
                repo: repo,
                pull_number: prNumber,
                reviewers: uniqueReviewers
              });
              
              console.log(`Requested: ${uniqueReviewers.join(', ')}`);
            } catch (error) {
              console.error(`Error: ${error.message}`);
              core.setFailed(error.message);
            }