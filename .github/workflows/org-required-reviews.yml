name: Required Reviews Enforcement

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
        description: "Name of the project/repository"
    secrets:
      token:
        required: true
        description: "GitHub token for API access"

permissions:
  contents: read
  pull-requests: write

jobs:
  check-required-reviews:
    name: Check required reviews for ${{ inputs.project-name }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout organization .github repository
        uses: actions/checkout@v4
        with:
          repository: MagellanTV/.github
          path: .github-org
          token: ${{ secrets.token }}
      
      - name: Display PR information
        run: |
          echo "════════════════════════════════════════════════════════════"
          echo "📋 PULL REQUEST INFORMATION"
          echo "════════════════════════════════════════════════════════════"
          echo "Repository: ${{ github.repository }}"
          echo "Project Name: ${{ inputs.project-name }}"
          echo "PR Number: #${{ github.event.pull_request.number }}"
          echo "Author: ${{ github.event.pull_request.user.login }}"
          echo "Branch: ${{ github.head_ref }} → ${{ github.base_ref }}"
          echo "════════════════════════════════════════════════════════════"
      
      - name: Load project-team mapping
        id: load-mapping
        run: |
          PROJECT_NAME="${{ inputs.project-name }}"
          MAPPING_FILE=".github-org/org-team-mapping.yml"
          
          echo "════════════════════════════════════════════════════════════"
          echo "🔍 LOADING PROJECT-TEAM MAPPING"
          echo "════════════════════════════════════════════════════════════"
          echo "Project detected: $PROJECT_NAME"
          echo "Mapping file: $MAPPING_FILE"
          
          # Check if mapping file exists
          if [ ! -f "$MAPPING_FILE" ]; then
            echo "❌ ERROR: Mapping file not found!"
            exit 1
          fi
          
          # Extract teams using Python
          python3 << 'PYTHON_EOF'
          import yaml
          import sys
          import os
          import json
          
          project_name = "${{ inputs.project-name }}"
          
          # Read mapping file
          with open('.github-org/org-team-mapping.yml', 'r') as f:
              mapping = yaml.safe_load(f)
          
          # Find project configuration
          if project_name in mapping['projects']:
              config = mapping['projects'][project_name]
              print(f"✅ Configuration found for: {project_name}")
          else:
              config = mapping['projects']['default']
              print(f"⚠️  No specific configuration found")
              print(f"ℹ️  Using default configuration")
          
          teams = config['teams']
          description = config['description']
          
          print(f"📋 Description: {description}")
          print(f"👥 Required teams ({len(teams)}):")
          for team in teams:
              print(f"   - {team}")
          
          # Write to GITHUB_OUTPUT
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"teams={json.dumps(teams)}\n")
              f.write(f"description={description}\n")
              f.write(f"teams_count={len(teams)}\n")
          
          PYTHON_EOF
          
          echo "════════════════════════════════════════════════════════════"
      
      - name: Create temporary requirements configuration
        run: |
          TEAMS='${{ steps.load-mapping.outputs.teams }}'
          
          echo "════════════════════════════════════════════════════════════"
          echo "📝 CREATING REQUIREMENTS CONFIGURATION"
          echo "════════════════════════════════════════════════════════════"
          
          # Start YAML file
          cat > /tmp/required-reviews-temp.yml <<EOF
          - name: Required reviews for ${{ inputs.project-name }}
            paths: unmatched
            teams:
          EOF
          
          # Add each team (estos son los team slugs reales de GitHub ahora)
          echo "$TEAMS" | jq -r '.[]' | while read team; do
            echo "      - $team" >> /tmp/required-reviews-temp.yml
          done
          
          echo "✅ Configuration file created"
          echo ""
          echo "Content:"
          cat /tmp/required-reviews-temp.yml
          echo "════════════════════════════════════════════════════════════"
      
      - name: Run required review check
        id: review-check
        uses: Automattic/action-required-review@v3
        with:
          token: ${{ secrets.token }} 
          requirements-file: '/tmp/required-reviews-temp.yml'
          status: 'Required reviews'
          fail: true
          request-reviews: true
      
      - name: Comment on PR - Reviews pending
        if: steps.review-check.outputs.requirements-satisfied == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.token }}
          script: |
            const projectName = '${{ inputs.project-name }}';
            const description = '${{ steps.load-mapping.outputs.description }}';
            const teamsJson = '${{ steps.load-mapping.outputs.teams }}';
            const teams = JSON.parse(teamsJson);
            
            const teamList = teams.map(team => `- @MagellanTV/${team}`).join('\n');
            
            const comment = `
            ## ⚠️ Required Reviews Pending
            
            **Project:** ${projectName}  
            **Description:** ${description}  
            
            ### Required Teams
            This PR requires approval from **at least one member** of each of the following teams:
            
            ${teamList}
            
            **Status:** ❌ Waiting for approvals
            
            ---
            <sub>Automatically assigned based on project-team mapping</sub>
            `;
            
            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Required Reviews Pending')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
      
      - name: Display success message
        if: steps.review-check.outputs.requirements-satisfied == 'true'
        run: |
          echo "════════════════════════════════════════════════════════════"
          echo "✅ ALL REQUIRED REVIEWS COMPLETED"
          echo "════════════════════════════════════════════════════════════"
          echo "Project: ${{ inputs.project-name }}"
          echo "All required teams have approved this PR"
          echo "════════════════════════════════════════════════════════════"